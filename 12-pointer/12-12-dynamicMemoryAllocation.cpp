/*
    Dynamic memory allocation and deallocation in heap memory

        malloc  -> void* malloc(size_t size)   // size_t datatype is stores only positive values or 0 like unsigned int
        calloc  -> void* calloc(size_t num,size_t size))
        realloc -> void* realloc(void* starting_adderss_of_the_existing_block, size_t size_of_new_block)
        ** in realloc machine may create entire new block of memory and copy the previous data

        free    -> for deallocate block of memory

*/

#include <iostream>
using namespace std;
int main()
{
    // malloc example
    int *p = (int *)malloc(4 * sizeof(int)); // here we do typecast because malloc return void pointer
    *p = 10;                                 // p[0]
    *(p + 1) = 4;                            // p[1]
    *(p + 2) = 5;                            // p[2]
    cout << p << endl;
    cout << "value of unassigned variable which is returned by malloc : " << p[3] << endl; // malloc initalize some garbage value to unassigned memory

    free(p);
    p = NULL;

    // calloc example
    int *x = (int *)calloc(3, sizeof(int));
    x[0] = 1;
    cout << x[0] << endl;
    cout << x[1] << endl; // calloc initalize zero(0) to unassigned memory
    free(p);
    p = NULL;

    // Example of malloc calloc and free with and without allcoating variable to memory
    int n;
    cout << "enter value of n for making array of that size : ";
    cin >> n;
    int *A = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
    {
        A[i] = i + 1;
    }
    int *B = (int *)calloc(n, sizeof(int));
    int *c = (int *)malloc(n * sizeof(int));
    cout << "Array A generated by malloc and values are assigned : ";
    for (int i = 0; i < n; i++)
    {
        cout << A[i] << " ";
    }
    cout << endl;
    cout << "Array B generated by calloc and values are not assigned : ";
    for (int i = 0; i < n; i++)
    {
        cout << B[i] << " ";
    }
    cout << endl;
    cout << "Array c generated by malloc and values are not assigned : ";
    for (int i = 0; i < n; i++)
    {
        cout << c[i] << " ";
    }
    cout << endl;

    free(A); // after freeing the memory there is chance to leak memory stored in that variable so we have to NULL that value
    A = NULL;
    free(B);
    B = NULL;
    free(c);
    c = NULL;

    // realloc

    int *Arr = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
    {
        Arr[i] = i + 1;
    }

    int *D = (int *)realloc(Arr, (n / 2) * sizeof(int));
    cout << "Array D made from realloc which is half of the size Array Arr which is allocated by malloc : ";
    for (int i = 0; i < n; i++)
    {
        cout << D[i] << " ";
    }
    cout << endl;

    int *F = (int *)realloc(NULL, n * sizeof(int)); // equivalent to malloc
    cout << "Making malloc array using realloc : ";
    for (int i = 0; i < n; i++)
    {
        cout << F[i] << " ";
    }
    cout << endl;

    cout << "freeing Arr with the use of realloc : ";
    int *E = (int *)realloc(Arr, 0); // equivalent to free(Arr)
    for (int i = 0; i < n; i++)
    {
        cout << E[i];
    }
    return 0;
}